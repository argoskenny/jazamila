#!/usr/bin/env php
<?php
require __DIR__ . '/../autoload.php';

$base = __DIR__ . '/../../laravel/tests/Feature';
$rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($base));
foreach ($rii as $file) {
    if ($file->isDir()) continue;
    if (substr($file->getFilename(), -4) !== '.php') continue;
    require $file->getPathname();
}
$classes = array_filter(get_declared_classes(), fn($c) => is_subclass_of($c, 'PHPUnit\\Framework\\TestCase'));
$failures = 0; $tests = 0;
foreach ($classes as $class) {
    $refClass = new ReflectionClass($class);
    $methods = array_filter($refClass->getMethods(), fn($m) => str_starts_with($m->getName(), 'test'));
    foreach ($methods as $method) {
        $tests++;
        $obj = $refClass->newInstance();
        if ($refClass->hasMethod('setUp')) { $m=$refClass->getMethod('setUp'); $m->setAccessible(true); $m->invoke($obj);}        
        try {
            $method->setAccessible(true);
            $method->invoke($obj);
            echo ".";
        } catch (Throwable $e) {
            $failures++;
            echo "F\n" . $class . '::' . $method->getName() . " - " . $e->getMessage() . "\n";
        }
        if ($refClass->hasMethod('tearDown')) { $m=$refClass->getMethod('tearDown'); $m->setAccessible(true); $m->invoke($obj);}        
    }
}
echo "\nTests: $tests, Failures: $failures\n";
exit($failures > 0 ? 1 : 0);
